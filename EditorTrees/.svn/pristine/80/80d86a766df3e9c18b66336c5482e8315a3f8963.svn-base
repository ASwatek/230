package editortrees;

// A node in a height-balanced binary tree with rank.
// Except for the NULL_NODE (if you choose to use one), one node cannot
// belong to two different trees.

public class Node {
	public static final Node NULL_NODE = new Node();

	enum Code {
		SAME, LEFT, RIGHT;
		// Used in the displayer and debug string
		@Override
		public String toString() {
			switch (this) {
			case LEFT:
				return "/";
			case SAME:
				return "=";
			case RIGHT:
				return "\\";
			default:
				throw new IllegalStateException();
			}
		}
	}

	// The fields would normally be private, but for the purposes of this class,
	// we want to be able to test the results of the algorithms in addition to
	// the
	// "publicly visible" effects

	Character element;
	Node left, right; // subtrees
	int rank; // inorder position of this node within its own subtree.
	Code balance;
	// Node parent; // You may want this field.
	// Feel free to add other fields that you find useful
	private DisplayableNodeWrapper dNW;

	// You will probably want to add several other methods

	// For the following methods, you should fill in the details so that they
	// work correctly

	public Node() {
		this.element = null;
		this.left = NULL_NODE;
		this.right = NULL_NODE;
		this.rank = 0;
		this.balance = null;
		this.dNW = new DisplayableNodeWrapper(this);

	}

	public Node(Character ch) {
		this.element = ch;
		this.left = NULL_NODE;
		this.right = NULL_NODE;
		this.rank = 0;
		this.balance = Code.SAME;
		this.dNW = new DisplayableNodeWrapper(this);

	}

	/**
	 * 
	 * Builds a node identical to the node given.
	 *
	 * @param e
	 * @return Node
	 */
	public Node buildTree(Node e) {
		Node temp = NULL_NODE;
		if (e.hasLeft() && e.hasRight()) {
			temp = new Node(e.element);
			temp.balance = e.getBalance();
			temp.rank = e.getRank();
			temp.left = temp.left.buildTree(e.left);
			temp.right = temp.right.buildTree(e.right);
		}
		if (e.hasLeft() && !e.hasRight()) {
			temp = new Node(e.element);
			temp.balance = e.getBalance();
			temp.rank = e.getRank();
			temp.left = temp.left.buildTree(e.left);
		}
		if (!e.hasLeft() && e.hasRight()) {
			temp = new Node(e.element);
			temp.balance = e.getBalance();
			temp.rank = e.getRank();
			temp.right = temp.right.buildTree(e.right);
		}
		if (!e.hasLeft() && !e.hasRight()) {
			temp = new Node(e.element);
			temp.balance = Code.SAME;
		}
		return temp;
	}

	public int height() {
		if (this == NULL_NODE) {
			return 0;
		}
		if (this.balance == Code.LEFT) {
			return 1 + this.left.height();
		}
		return 1 + this.right.height();
	}

	public int size() {
		if (this == NULL_NODE) {
			return 0;
		}
		return this.rank + 1 + this.right.size();
	}

	public StringBuilder toString(StringBuilder stringB) {
		if (this == NULL_NODE) {
			return stringB;
		}
		this.left.toString(stringB);
		stringB.append(this.element);
		this.right.toString(stringB);

		return stringB;
	}

	public StringBuilder toDebugString(StringBuilder stringBuilder) {
		if (this == NULL_NODE) {
			return stringBuilder;
		}
		stringBuilder.append(this.element);
		stringBuilder.append(this.rank);
		stringBuilder.append(this.balance);
		stringBuilder.append(", ");
		this.left.toDebugString(stringBuilder);
		this.right.toDebugString(stringBuilder);
		return stringBuilder;
	}

	/**
	 * 
	 * Returns the element of the node at the given index.
	 *
	 * @param pos
	 * @return char
	 */
	public char get(int pos) {
		if (pos > this.size() - 1 || pos < 0) {
			throw new IndexOutOfBoundsException();
		}

		if (pos == this.rank) {
			return this.element;
		}

		if (this.rank < pos) {
			return this.right.get(pos - this.rank - 1);
		}

		return this.left.get(pos);
	}

	/**
	 * 
	 * Adds a character at the right most index. Will keep recursing right if
	 * the Node is not NULL_NODE. If it is NULL_NODE, it will insert the new
	 * node and move back up the tree. As the code goes back up the tree, it
	 * will fix balance codes as necessary.
	 *
	 * @param ch
	 * @param rotationCount
	 * @return NodeWrapperthat contains the proper tree and rotation count
	 */
	public NodeWrapper add(char ch, int rotationCount) {
		if (this == NULL_NODE) {
			return new NodeWrapper(new Node(ch), rotationCount, false, null);
		}
		NodeWrapper temp = this.right.add(ch, rotationCount);
		this.right = temp.node;

		if (temp.bool) {
			return new NodeWrapper(this, temp.count, true, null);
		}

		if (this.balance == Code.RIGHT && this.balance == this.right.balance) {
			return this.singleRotationLeft(rotationCount);
		} else if (this.balance == Code.LEFT) {
			this.balance = Code.SAME;
			return new NodeWrapper(this, rotationCount, true, null);
		} else {
			this.balance = Code.RIGHT;
		}
		return new NodeWrapper(this, rotationCount, false, null);
	}

	/**
	 * 
	 * Adds a node at the given index. Will recurse left if the position is less
	 * than the nodes current rank. Will recurse right if the position is
	 * greater than rank. If going right, it decreases the pos by the sum of the
	 * rank and 1. If the node is NULL_NODE, then a new node will be inserted at
	 * the current point. as the code goes back up the tree, it will fix balance
	 * codes as necessary.
	 *
	 * @param ch
	 * @param rotationCount
	 * @param pos
	 * @return NodeWrapperthat contains the proper tree and rotation count
	 */
	public NodeWrapper add(char ch, int rotationCount, int pos) {
		if (this == NULL_NODE) {// Insertion point
			return new NodeWrapper(new Node(ch), rotationCount, false, null);
		}
		NodeWrapper temp = null;
		if (pos > this.rank) { // Insetion point is to the right
			temp = this.right.add(ch, rotationCount, pos - this.rank - 1);
			this.right = temp.node;

			if (temp.bool) {
				return new NodeWrapper(this, temp.count, true, null);
			}

			if (this.balance == Code.RIGHT) {
				if (this.balance == this.right.balance) {
					return this.singleRotationLeft(rotationCount);
				} else if (this.right.balance == Code.LEFT) {
					return this.doubleRotationLeft(rotationCount);
				}
			} else if (this.balance == Code.LEFT) {
				this.balance = Code.SAME;
				return new NodeWrapper(this, rotationCount, true, null);
			} else {
				this.balance = Code.RIGHT;
			}

		} else { // Insetion point is to the left
			temp = this.left.add(ch, rotationCount, pos);
			this.rank++;
			this.left = temp.node;

			if (temp.bool) {
				return new NodeWrapper(this, temp.count, true, null);
			}

			if (this.balance == Code.LEFT) {
				if (this.balance == this.left.balance) {
					return this.singleRotationRight(rotationCount, false);
				} else if (this.left.balance == Code.RIGHT) {
					return this.doubleRotationRight(rotationCount);
				}
			} else if (this.balance == Code.RIGHT) {
				this.balance = Code.SAME;
				return new NodeWrapper(this, rotationCount, true, null);
			} else {
				this.balance = Code.LEFT;
			}
		}

		return new NodeWrapper(this, rotationCount, false, null);
	}

	/**
	 * 
	 * Removes the node at the given position. Will recurse left if the position
	 * is less than the nodes current rank. Will recurse right if the position
	 * is greater than rank. If going right, it decreases the pos by the sum of
	 * the rank and 1. If the node its at is the the node to delete, the in
	 * order successor will be brought to the new position. As the code goes
	 * back up the tree, it will fix balance codes as necessary.
	 *
	 * @param pos
	 * @param rotationCount
	 * @return NodeWrapper that contains the proper tree, rotation count, and
	 *         removed character
	 */
	public NodeWrapper delete(int pos, int rotationCount) {
		if (pos < this.rank) { // Node is to the left
			this.rank--;
			NodeWrapper tempLeft = this.left.delete(pos, rotationCount);
			this.left = tempLeft.node;
			if (tempLeft.bool) {
				return new NodeWrapper(this, tempLeft.count, true, tempLeft.character);
			}
			if (this.balance == Code.SAME) {
				this.balance = Code.RIGHT;
				return new NodeWrapper(this, tempLeft.count, true, tempLeft.character);
			} else if (this.balance == Code.RIGHT) {
				NodeWrapper temp = null;
				if (this.right.balance == Code.RIGHT || this.right.balance == Code.SAME) {
					temp = this.singleRotationLeft(tempLeft.count);
				} else { // right.balance == Code.LEFT
					temp = this.doubleRotationLeft(tempLeft.count);
				}
				return new NodeWrapper(temp.node, temp.count, false, tempLeft.character);
			} else { // Balance == Code.LEFT
				this.balance = Code.SAME;
				return new NodeWrapper(this, tempLeft.count, false, tempLeft.character);
			}

		}
		if (pos > this.rank) { // Node is to the right
			int newIndex = pos - this.rank - 1;
			NodeWrapper tempRight = this.right.delete(newIndex, rotationCount);
			this.right = tempRight.node;
			if (tempRight.bool) {
				return new NodeWrapper(this, tempRight.count, true, tempRight.character);
			}
			if (this.balance == Code.SAME) {
				this.balance = Code.LEFT;
				return new NodeWrapper(this, tempRight.count, true, tempRight.character);
			} else if (this.balance == Code.RIGHT) {
				this.balance = Code.SAME;
				return new NodeWrapper(this, tempRight.count, false, tempRight.character);
			} else {
				NodeWrapper temp = null;
				if (this.left.balance == Code.LEFT || this.left.balance == Code.SAME) {
					temp = this.singleRotationRight(tempRight.count, true);
				} else {// left.balance == Code.RIGHT
					temp = this.doubleRotationRight(tempRight.count);
				}

				if (temp.node.balance != this.left.balance && this.left.balance == Code.SAME) {
					return new NodeWrapper(temp.node, temp.count, true, tempRight.character);
				}

				return new NodeWrapper(temp.node, temp.count, false, tempRight.character);
			}
		}

		// Deletion is at this node
		if (!this.hasChildren()) {// Is a leaf node
			return new NodeWrapper(NULL_NODE, rotationCount, false, this.element);
		}
		if (this.hasLeft() && !this.hasRight()) {// Only has a left sub tree
			return new NodeWrapper(this.left, rotationCount, false, this.element);
		}
		if (!this.hasLeft() && this.hasRight()) {// Only has a right sub tree
			return new NodeWrapper(this.right, rotationCount, false, this.element);
		}

		Character removed = this.element;
		Node newLeft = this.left;
		int newRank = this.rank;
		Code oldBalance = this.balance;

		NodeWrapper newData = this.right.delete(0, rotationCount); // Gets in
																	// order
																	// successor
		Node newRoot = new Node(newData.character);
		newRoot.rank = newRank;
		newRoot.balance = oldBalance;
		newRoot.right = newData.node;// should always be NN
		newRoot.left = newLeft;

		if (newData.bool) {
			return new NodeWrapper(newRoot, newData.count, newData.bool, removed);
		}

		if (newRoot.balance == Code.SAME) {
			newRoot.balance = Code.LEFT;
			return new NodeWrapper(newRoot, rotationCount, true, removed);
		} else if (newRoot.balance == Code.LEFT) {
			if (newData.count == rotationCount) {
				NodeWrapper temp = null;
				if (newRoot.left.balance == Code.LEFT || newRoot.left.balance == Code.SAME) {
					temp = newRoot.singleRotationRight(rotationCount, true);
				} else if (newRoot.left.balance == Code.RIGHT) {
					temp = newRoot.doubleRotationRight(rotationCount);
				}
				return new NodeWrapper(temp.node, temp.count, false, removed);
			}
		} else { // balance = Code.RIGHT
			if (newRoot.right.balance == Code.SAME) {
				newRoot.balance = Code.SAME;
			} else {
				NodeWrapper temp = newRoot.singleRotationLeft(rotationCount);
				return new NodeWrapper(temp.node, temp.count, false, removed);
			}
		}

		return new NodeWrapper(newRoot, newData.count, newData.bool, removed);

	}

	/**
	 * 
	 * Performs a double right rotation on the node.
	 *
	 * @param rotationCount
	 * @return NodeWrapper that contains the proper tree and rotation count
	 */
	private NodeWrapper doubleRotationRight(int rotationCount) {
		Code leftRightBalance = this.left.right.balance;
		NodeWrapper doubleRightWrapper = this.left.singleRotationLeft(rotationCount);
		this.left = doubleRightWrapper.node;
		doubleRightWrapper = this.singleRotationRight(doubleRightWrapper.count, false);
		if (leftRightBalance == Code.LEFT) {
			doubleRightWrapper.node.right.balance = Code.RIGHT;
			doubleRightWrapper.node.left.balance = Code.SAME;
		} else if (leftRightBalance == Code.RIGHT) {
			doubleRightWrapper.node.right.balance = Code.SAME;
			doubleRightWrapper.node.left.balance = Code.LEFT;
		} else {
			doubleRightWrapper.node.right.balance = Code.SAME;
			doubleRightWrapper.node.left.balance = Code.SAME;
		}
		return doubleRightWrapper;
	}

	/**
	 * 
	 * Performs a double left rotation on the node.
	 *
	 * @param rotationCount
	 * @return NodeWrapper that contains the proper tree and rotation count
	 */
	private NodeWrapper doubleRotationLeft(int rotationCount) {
		Code rightLeftBalance = this.right.left.balance;
		NodeWrapper doubleLeftWrapper = this.right.singleRotationRight(rotationCount, false);
		this.right = doubleLeftWrapper.node;
		doubleLeftWrapper = this.singleRotationLeft(doubleLeftWrapper.count);
		if (rightLeftBalance == Code.LEFT) {
			doubleLeftWrapper.node.right.balance = Code.RIGHT;
			doubleLeftWrapper.node.left.balance = Code.SAME;
		} else if (rightLeftBalance == Code.RIGHT) {
			doubleLeftWrapper.node.right.balance = Code.SAME;
			doubleLeftWrapper.node.left.balance = Code.LEFT;
		} else {
			doubleLeftWrapper.node.right.balance = Code.SAME;
			doubleLeftWrapper.node.left.balance = Code.SAME;
		}
		return doubleLeftWrapper;
	}

	/**
	 * 
	 * Performs a single left rotation on the node.
	 *
	 * @param rotationCount
	 * @return NodeWrapper that contains the proper tree and rotation count
	 */
	public NodeWrapper singleRotationLeft(int rotationCount) {
		Node newRoot = this.right;
		Node newLeft = this;

		Node temp = this.right.left;

		newLeft.right = temp;
		newRoot.left = newLeft;

		newRoot.balance = Code.SAME;
		newLeft.balance = Code.SAME;

		newRoot.rank += (1 + this.rank);

		return new NodeWrapper(newRoot, rotationCount + 1, true, null);
	}

	/**
	 * 
	 * Performs a single right rotation on the node.
	 *
	 * @param rotationCount
	 * @return NodeWrapper that contains the proper tree and rotation count
	 */
	public NodeWrapper singleRotationRight(int rotationCount, boolean isDelete) {
		Node newRoot = this.left;
		Node newRight = this;
		int leftSize = this.left.rank;
		int rightSize = this.rank - this.left.rank - 1;

		int newRightRank = this.rank - (this.left.rank + 1);
		int newRootRank = this.left.rank;

		Node temp = this.left.right;

		newRight.left = temp;
		newRoot.right = newRight;
		if (isDelete) {
			if (leftSize <= rightSize) {
				newRoot.balance = Code.RIGHT;
				newRight.balance = Code.LEFT;
			} else {
				newRoot.balance = Code.SAME;
				newRight.balance = Code.SAME;
			}
		} else {
			newRoot.balance = Code.SAME;
			newRight.balance = Code.SAME;
		}

		newRoot.rank = newRootRank;
		newRight.rank = newRightRank; // Need to find how to calcuate this

		return new NodeWrapper(newRoot, rotationCount + 1, true, null);
	}

	/**
	 * 
	 * Builds a tree based on the given string. Looks at the middle character of the string and
	 * sections off the previous and furture part of the string to the left and right subtrees
	 * respectivly. Returns the root of the new tree at the end of the recursion.
	 *
	 * @param s
	 * @return Node
	 */
	public Node buildTree(String s) {
		Node temp = NULL_NODE;
		if (s.length() == 1) {
			temp = new Node(s.charAt(0));
		} else if (s.length() == 2) {
			temp = new Node(s.charAt(1));
			temp.left = new Node(s.charAt(0));
			temp.balance = Code.LEFT;
			temp.rank = 1;
		} else if (s.length() == 3) {
			temp = new Node(s.charAt(1));
			temp.left = new Node(s.charAt(0));
			temp.right = new Node(s.charAt(2));
			temp.rank = 1;
		} else {
			temp = new Node(s.charAt(s.length() / 2));
			temp.rank = s.length() / 2;
			temp.left = temp.left.buildTree(s.substring(0, s.length() / 2));
			temp.right = temp.right.buildTree(s.substring(s.length() / 2 + 1));
		}

		return temp;
	}

	/**
	 * 
	 * Adds the other node to the curent tree. Will recurse down the right subtree of this until
	 * it reaches a node whose height is within 1 of the other node. The code will recurse back up
	 * the tree fixing balance codes as needed.
	 *
	 * @param other
	 * @param otherHeight
	 * @param q
	 * @param thisHeight
	 * @return
	 */
	public Node concatenate(Node other, int otherHeight, char q, int thisHeight) {
		if (thisHeight - otherHeight <= 1) {
			Node temp = new Node(q);
			temp.left = this;
			temp.right = other;
			temp.rank = temp.left.size();
			return temp;
		}
		
		this.right = this.right.concatenate(other, otherHeight, q, thisHeight - 1);
		if (this.balance == Code.RIGHT) {
			return this.doubleRotationLeft(0).node;
		} else if (this.balance == Code.LEFT) {
			this.balance = Code.SAME;
		} else {
			this.balance = Code.RIGHT;
		}

		return this;
	}
	
	public void split(int pos, EditTree leftTree, EditTree rightTree) {
		if (pos == this.rank) {// at split point
			EditTree tempTree = new EditTree();
			tempTree.root = this.left;
			leftTree.concatenate(tempTree);
			EditTree tempTree2 = new EditTree();
			this.left = NULL_NODE;
			tempTree2.root = this;
			tempTree2.concatenate(rightTree);
			rightTree.root = tempTree2.root;
			return;
		} else if (pos < this.rank) {// going left
			Node temp = this.left;
			this.left = NULL_NODE;
			this.balance = Code.RIGHT;
			this.rank = 0;
			EditTree tempTree = new EditTree();
			tempTree.root = this;
			tempTree.concatenate(rightTree);
			rightTree.root = tempTree.root;
			temp.split(pos, leftTree, rightTree);
			return;
		} // Going Right
		Node temp = this.right;
		this.right = NULL_NODE;
		EditTree tempTree = new EditTree();
		tempTree.root = this;
		leftTree.concatenate(tempTree);
		temp.split(pos - this.rank - 1, leftTree, rightTree);
	}

	public int slowSize() {
		if (this == NULL_NODE) {
			return 0;
		}
		return 1 + this.left.slowSize() + this.right.slowSize();
	}

	public int slowHeight() {
		if (this == NULL_NODE) {
			return 0;
		}
		return 1 + Math.max(this.left.slowSize(), this.right.slowSize());
	}

	public DisplayableNodeWrapper getDisplayableNodePart() {
		return this.dNW;
	}

	public boolean hasLeft() {
		return this.left != NULL_NODE;
	}

	public Node getLeft() {
		return this.left;
	}

	public Node getRight() {
		return this.right;
	}

	public boolean hasRight() {
		return this.right != NULL_NODE;
	}

	public boolean hasParent() {
		return true;
	}

	public Node getParent() {
		return null;
	}

	public int getRank() {
		return this.rank;
	}

	public Code getBalance() {
		return this.balance;
	}

	public String getBalanceToString() {
		return this.balance.toString();
	}

	public char getElement() {
		return this.element;
	}

	private boolean hasChildren() {
		return this.hasLeft() || this.hasRight();
	}

	/**
	 * 
	 * Wrapper class that contains a node, an interger, a boolean, and a
	 * character
	 *
	 * @author crowelsl. Created Apr 25, 2018.
	 */
	class NodeWrapper {
		int count;
		Node node;
		boolean bool;
		Character character;

		public NodeWrapper(Node node, int count, boolean bool, Character character) {
			this.count = count;
			this.node = node;
			this.bool = bool;
			this.character = character;
		}
	}

	public class DoubleNode {
		Node node1;
		Node node2;

		public DoubleNode(Node node1, Node node2) {
			this.node1 = node1;
			this.node2 = node2;
		}
	}
}