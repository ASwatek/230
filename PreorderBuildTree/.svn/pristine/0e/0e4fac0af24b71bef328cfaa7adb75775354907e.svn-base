package buildtree;

/**
 * 
 * @author Matt Boutell and <<<YOUR NAME HERE>>>.
 * @param <T>
 */

public class BinaryTree {

	private BinaryNode root;

	private final BinaryNode NULL_NODE = new BinaryNode(null);

	public BinaryTree() {
		root = NULL_NODE;
	}

	/**
	 * Constructs a tree (any tree of characters, not just a BST) with the given
	 * values and number of children, given in a pre-order traversal order. See
	 * the HW spec for more details.
	 * 
	 * @param chars
	 *            One char per node.
	 * @param children
	 *            L,R, 2, or 0.
	 */
	public BinaryTree(String chars, String children) {
		// TODO: Implement this constructor. You may not add any other fields to
		// the BinaryTree class, but you may add local variables and helper
		// methods if you like.
		if(chars.length()==0) root = NULL_NODE;
		else{
			root = new BinaryNode(chars.charAt(0));
			root.makeTree(chars.substring(1, chars.length()), children);
			root.makeTree(chars, children);
		}
	}

	/**
	 * In-order traversal of the characters
	 */
	@Override
	public String toString() {
		return root.toString();
	}

	/**
	 * @return A string showing an in-order traversal of nodes with extra
	 *         brackets so that the structure of the tree can be determined.
	 */
	public String toStructuredString() {
		return root.toStructuredString();
	}

	// /////////////// BinaryNode
	public class BinaryNode {

		public Character data;
		public BinaryNode left;
		public BinaryNode right;
		
		public BinaryNode(){
			this.data = null;
			this.left = NULL_NODE;
			this.right = NULL_NODE;
		}

		public BinaryNode(Character element) {
			this.data = element;
			this.left = NULL_NODE;
			this.right = NULL_NODE;
		}

		public BinaryNode makeTree(String chars, String children) {
			if(chars.length()==0 || children.length()==0){
				return NULL_NODE;
			}
			if(chars.length()==1 || children.length()==1){
				if(children.charAt(0)=='L'){
					this.left = new BinaryNode(chars.charAt(0));
				}else if(children.charAt(0)=='R'){
					this.right = new BinaryNode(chars.charAt(0));
				}
				return this;
			}
			if(root == NULL_NODE){
				BinaryTree.this.root = new BinaryNode(chars.charAt(0));
			}
			
			char current = chars.charAt(1);
			char childCount = children.charAt(1);
			BinaryNode addNode = new BinaryNode(current);
			
			if(childCount=='0'){//get its parent, since it has to have one if reaches here
				char parent = chars.charAt(0);
				char parChildCount = children.charAt(0);
				
				BinaryNode parentNode = new BinaryNode(parent);
				if(parChildCount=='L'){
					parentNode.left=addNode;
				}else if(parChildCount=='R'){
					parentNode.right=addNode;
				}else{//has 2 children so do special case, i think it goes on the left first
					
				}
				return parentNode.makeTree(chars.substring(1, chars.length()), children.substring(1, children.length()));
				
			}
			
			return addNode.makeTree(chars.substring(1, chars.length()), children.substring(1, children.length()));
		}

		@Override
		public String toString() {
			if (this == NULL_NODE) {
				return "";
			}
			return left.toString() + data + right.toString();
		}

		public String toStructuredString() {
			if (this == NULL_NODE) {
				return "";
			}
			return "(" + left.toStructuredString() + this.data
					+ right.toStructuredString() + ")";
		}

	}
}