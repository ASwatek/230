package buildtree;

import java.util.Stack;

/**
 * 
 * @author Matt Boutell and <<<YOUR NAME HERE>>>.
 * @param <T>
 */

public class BinaryTree {

	private BinaryNode root;

	private final BinaryNode NULL_NODE = new BinaryNode(null);

	public BinaryTree() {
		root = NULL_NODE;
	}

	/**
	 * Constructs a tree (any tree of characters, not just a BST) with the given
	 * values and number of children, given in a pre-order traversal order. See
	 * the HW spec for more details.
	 * 
	 * @param chars
	 *            One char per node.
	 * @param children
	 *            L,R, 2, or 0.
	 */
	public BinaryTree(String chars, String children) {
		// TODO: Implement this constructor. You may not add any other fields to
		// the BinaryTree class, but you may add local variables and helper
		// methods if you like.
		Stack<BinaryNode> nodes = new Stack<>();
		if(chars.length()==0){
			root = NULL_NODE;
		}
		else if(chars.length()==1){
			root = new BinaryNode(chars.charAt(0));
		}
		else{
			root = new BinaryNode(chars.charAt(0));
			root=root.make(chars.substring(1, chars.length()), children.substring(1, children.length()), nodes);
		}		
	}

	/**
	 * In-order traversal of the characters
	 */
	@Override
	public String toString() {
		return root.toString();
	}

	/**
	 * @return A string showing an in-order traversal of nodes with extra
	 *         brackets so that the structure of the tree can be determined.
	 */
	public String toStructuredString() {
		return root.toStructuredString();
	}

	// /////////////// BinaryNode
	public class BinaryNode {

		public Character data;
		public BinaryNode left;
		public BinaryNode right;
		
		public BinaryNode(){
			this.data = null;
			this.left = NULL_NODE;
			this.right = NULL_NODE;
		}

		public BinaryNode make(String chars, String children, Stack<BinaryNode> nodes) {
			if(children.length()==0){//empty case
				System.out.println("length");
				return this;
			}
			
			if(children.length()==1){
				if(children.charAt(0)=='R'){
					this.right=nodes.pop();
				}else if(children.charAt(0)=='L'){
					this.left=nodes.pop();
				}
				System.out.println("final");
				return this;
			}
			
//			if(chars.length()==1){//base build case
//				if(children.charAt(0)=='R'){
//					this.right=nodes.pop();
//					return this;
//				}else{//has to be left
//					this.left=nodes.pop();
//					return this;
//				}
//			}
			
			int last = chars.length()-1;			
			BinaryNode parent = new BinaryNode(chars.charAt(last-1));
			BinaryNode toAdd = new BinaryNode(chars.charAt(last));
			nodes.push(toAdd);
			
			if(children.charAt(last)=='0'){
//				nodes.push(toAdd);
				System.out.println("0");
				return parent.make(chars.substring(0, last), children.substring(0, last), nodes);
			}else if(children.charAt(last)=='L'){
				parent.left=nodes.pop();
//				parent.left=toAdd;
				nodes.push(parent);
				System.out.println("L");
				return parent.make(chars.substring(0, last), children.substring(0, last), nodes);
			}else if(children.charAt(last)=='R'){
				parent.right=nodes.pop();
				nodes.push(parent);
				System.out.println("R");
				return parent.make(chars.substring(0, last-1), children.substring(0, last-1), nodes);
			}else{
				nodes.push(toAdd);
				parent.left = nodes.pop();
				parent.right = nodes.pop();
				nodes.push(parent);
				System.out.println("end");
				return parent.make(chars.substring(0, last-2), children.substring(0, last-2), nodes);
			}
			
//			return this;
		}

		public BinaryNode(Character element) {
			this.data = element;
			this.left = NULL_NODE;
			this.right = NULL_NODE;
		}

		@Override
		public String toString() {
			if (this == NULL_NODE) {
				return "";
			}
			return left.toString() + data + right.toString();
		}

		public String toStructuredString() {
			if (this == NULL_NODE) {
				return "";
			}
			return "(" + left.toStructuredString() + this.data
					+ right.toStructuredString() + ")";
		}

	}
}