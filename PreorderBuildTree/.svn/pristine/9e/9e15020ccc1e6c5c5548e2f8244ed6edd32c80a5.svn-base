package buildtree;

import java.util.Stack;

/**
 * 
 * @author Matt Boutell and <<<YOUR NAME HERE>>>.
 * @param <T>
 */

public class BinaryTree {

	private BinaryNode root;

	private final BinaryNode NULL_NODE = new BinaryNode(null);

	public BinaryTree() {
		root = NULL_NODE;
	}

	/**
	 * Constructs a tree (any tree of characters, not just a BST) with the given
	 * values and number of children, given in a pre-order traversal order. See
	 * the HW spec for more details.
	 * 
	 * @param chars
	 *            One char per node.
	 * @param children
	 *            L,R, 2, or 0.
	 */
	public BinaryTree(String chars, String children) {
		// TODO: Implement this constructor. You may not add any other fields to
		// the BinaryTree class, but you may add local variables and helper
		// methods if you like.
		Stack<BinaryNode> nodes = new Stack<>();
		if(chars.length()==0){
			root = NULL_NODE;
		}
		else{
			root = new BinaryNode(chars.charAt(0));
			if(chars.length()==2){
				if(children.charAt(0)=='L'){
					root.left = new BinaryNode(chars.charAt(1));
				}else{
					root.right = new BinaryNode(chars.charAt(1));
				}
			}
			else if(chars.length()>2){
				int length = chars.length();
				root.make(chars.substring(1, length), children, nodes, length-1);
			}		
		}
	}

	/**
	 * In-order traversal of the characters
	 */
	@Override
	public String toString() {
		return root.toString();
	}

	/**
	 * @return A string showing an in-order traversal of nodes with extra
	 *         brackets so that the structure of the tree can be determined.
	 */
	public String toStructuredString() {
		return root.toStructuredString();
	}

	// /////////////// BinaryNode
	public class BinaryNode {

		public Character data;
		public BinaryNode left;
		public BinaryNode right;
		
		public BinaryNode(){
			this.data = null;
			this.left = NULL_NODE;
			this.right = NULL_NODE;
		}

		public BinaryNode make(String chars, String children, Stack<BinaryNode> nodes, int index) {			
			if(chars.length()==0){
				if(children.length()==1){
					if(children.charAt(0)=='L'){
						root.left = nodes.pop();
					}else if(children.charAt(0)=='R'){
						root.right = nodes.pop();
					}else if(children.charAt(0)=='2'){
						root.left=nodes.pop();
						root.right=nodes.pop();
					}
				}
				return this;
			}
			if(chars.length()==1){
				if(children.charAt(0)=='R'){
					this.right=nodes.pop();
				}else if(children.charAt(0)=='L'){
					this.left=nodes.pop();
				}else{//shouldnt happen?
					return this;
				}
			}
			
			BinaryNode child = new BinaryNode(chars.charAt(index-1));
			BinaryNode parent = new BinaryNode(chars.charAt(index-2));
			
			System.out.println(index);
			System.out.println(children.length());
			if(children.charAt(index)=='0'){
				if(children.charAt(index-1)=='R'){
					parent.right = child;
				}else if(children.charAt(index-1)=='L'){
					parent.left = child;
				}else if(children.charAt(index-1)=='0'){
					//go up because next one will be a double
				}else{//double case
					parent.left=nodes.pop();
					parent.right=nodes.pop();
				}
				nodes.push(parent);
			}else if(children.charAt(index)=='L'){
				child.left=nodes.pop();
				if(children.charAt(index-1)=='L'){
					parent.left=child;
				}else if(children.charAt(index-1)=='R'){
					parent.right=child;
				}
				nodes.push(parent);
			}
			
			return this.make(chars.substring(0, chars.length()-1), children.substring(0, children.length()-1)
					, nodes, index-1);
		}

		public BinaryNode(Character element) {
			this.data = element;
			this.left = NULL_NODE;
			this.right = NULL_NODE;
		}

		@Override
		public String toString() {
			if (this == NULL_NODE) {
				return "";
			}
			return left.toString() + data + right.toString();
		}

		public String toStructuredString() {
			if (this == NULL_NODE) {
				return "";
			}
			return "(" + left.toStructuredString() + this.data
					+ right.toStructuredString() + ")";
		}

	}
}